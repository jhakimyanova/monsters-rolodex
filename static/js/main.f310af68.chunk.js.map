{"version":3,"sources":["components/card-list/card-list.component.jsx","components/card/card.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["CardList","props","className","children","Card","alt","src","monster","id","name","email","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","map","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAEaA,G,YAAW,SAACC,GACvB,OAAO,qBAAKC,UAAU,YAAf,SAA4BD,EAAME,aCD9BC,G,MAAO,SAACH,GACnB,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEG,IAAI,UACJC,IAAG,+BAA0BL,EAAMM,QAAQC,GAAxC,4BAEL,6BAAKP,EAAMM,QAAQE,OACnB,4BAAIR,EAAMM,QAAQG,aCRXC,G,MAAY,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACvC,OACE,uBACEX,UAAU,SACVY,KAAK,SACLC,YAAaH,EACbI,SAAUH,MCwCDI,E,kDAzCb,aAAe,IAAD,8BACZ,gBAmCFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAnCtC,EAAKC,MAAQ,CACXC,SAAU,GACVJ,YAAa,IAJH,E,gEASO,IAAD,OAClBK,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKV,SAAS,CAAEK,SAAUK,S,+BAGrC,IAAD,EAC2BC,KAAKP,MAA/BC,EADD,EACCA,SAAUJ,EADX,EACWA,YACZW,EAAmBP,EAASQ,QAAO,SAACzB,GAAD,OACvCA,EAAQE,KAAKwB,cAAcC,SAASd,EAAYa,kBAElD,OACE,sBAAK/B,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEU,YAAY,mBACZC,aAAciB,KAAKjB,eAErB,cAAC,EAAD,UACGkB,EAAiBI,KAAI,SAAC5B,GAAD,OACpB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,gB,GA9Bb4B,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f310af68.chunk.js","sourcesContent":["import \"./card-list.styles.css\";\n\nexport const CardList = (props) => {\n  return <div className=\"card-list\">{props.children}</div>;\n};\n","import \"./card.styles.css\";\n\nexport const Card = (props) => {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"monster\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      />\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n","import \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeHolder, handleChange }) => {\n  return (\n    <input\n      className=\"search\"\n      type=\"search\"\n      placeholder={placeHolder}\n      onChange={handleChange}\n    />\n  );\n};\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { Card } from \"./components/card/card.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox\n          placeHolder=\"search monsters!\"\n          handleChange={this.handleChange}\n        />\n        <CardList>\n          {filteredMonsters.map((monster) => (\n            <Card key={monster.id} monster={monster} />\n          ))}\n        </CardList>\n      </div>\n    );\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}